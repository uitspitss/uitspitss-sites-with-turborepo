/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Otoge Bookmark API
 * Otoge Bookmark API
 * OpenAPI spec version: 0.1
 */
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import { rest } from 'msw';
import { faker } from '@faker-js/faker';
export type HealthControllerCheck503Details = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
};

export type HealthControllerCheck503Error = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
} | null;

export type HealthControllerCheck503Info = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
} | null;

export type HealthControllerCheck503 = {
  status?: string;
  info?: HealthControllerCheck503Info;
  error?: HealthControllerCheck503Error;
  details?: HealthControllerCheck503Details;
};

export type HealthControllerCheck200Details = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
};

export type HealthControllerCheck200Error = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
} | null;

export type HealthControllerCheck200Info = {
  [key: string]: {
    status?: string;
    [key: string]: string;
  };
} | null;

export type HealthControllerCheck200 = {
  status?: string;
  info?: HealthControllerCheck200Info;
  error?: HealthControllerCheck200Error;
  details?: HealthControllerCheck200Details;
};

export interface UpdateUserDto {
  email?: string;
  password?: string;
}

export interface LoggedInTokenEntity {
  accessToken: string;
  refreshToken: string;
}

export interface LoginDto {
  email: string;
  password: string;
}

export interface UserEntity {
  id: string;
  email: string;
}

export interface CreateUserDto {
  email: string;
  password: string;
}

export interface UpdateSongDto {
  title?: string;
  gameId?: string;
}

export interface SongEntity {
  id: string;
  title: string;
  gameId: string;
}

export interface CreateSongDto {
  title: string;
  gameId: string;
}

export interface UpdateGameDto {
  title?: string;
}

export interface GameEntity {
  id: string;
  title: string;
}

export interface CreateGameDto {
  title: string;
}

export const gamesControllerCreate = <TData = AxiosResponse<GameEntity>>(
  createGameDto: CreateGameDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/games`, createGameDto, options);
};

export const gamesControllerFindAll = <TData = AxiosResponse<GameEntity[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/games`, options);
};

export const gamesControllerFindOne = <TData = AxiosResponse<GameEntity>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/games/${id}`, options);
};

export const gamesControllerUpdate = <TData = AxiosResponse<GameEntity>>(
  id: string,
  updateGameDto: UpdateGameDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(`/games/${id}`, updateGameDto, options);
};

export const gamesControllerRemove = <TData = AxiosResponse<void>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/games/${id}`, options);
};

export const songsControllerCreate = <TData = AxiosResponse<SongEntity>>(
  createSongDto: CreateSongDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/songs`, createSongDto, options);
};

export const songsControllerFindAll = <TData = AxiosResponse<SongEntity[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/songs`, options);
};

export const songsControllerFindOne = <TData = AxiosResponse<SongEntity>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/songs/${id}`, options);
};

export const songsControllerUpdate = <TData = AxiosResponse<SongEntity>>(
  id: string,
  updateSongDto: UpdateSongDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(`/songs/${id}`, updateSongDto, options);
};

export const songsControllerRemove = <TData = AxiosResponse<void>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/songs/${id}`, options);
};

export const authControllerRegister = <TData = AxiosResponse<UserEntity>>(
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/auth/register`, createUserDto, options);
};

export const authControllerLogin = <TData = AxiosResponse<LoggedInTokenEntity>>(
  loginDto: LoginDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/auth/login`, loginDto, options);
};

export const authControllerLogout = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/auth/logout`, options);
};

export const authControllerRefreshToken = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/auth/refresh`, options);
};

export const usersControllerCreate = <TData = AxiosResponse<UserEntity>>(
  createUserDto: CreateUserDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(`/users`, createUserDto, options);
};

export const usersControllerFindAll = <TData = AxiosResponse<UserEntity[]>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/users`, options);
};

export const usersControllerFindOne = <TData = AxiosResponse<UserEntity>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/users/${id}`, options);
};

export const usersControllerUpdate = <TData = AxiosResponse<UserEntity>>(
  id: string,
  updateUserDto: UpdateUserDto,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.patch(`/users/${id}`, updateUserDto, options);
};

export const usersControllerRemove = <TData = AxiosResponse<void>>(
  id: string,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.delete(`/users/${id}`, options);
};

export const healthControllerCheck = <
  TData = AxiosResponse<HealthControllerCheck200>,
>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`/health`, options);
};

export type GamesControllerCreateResult = AxiosResponse<GameEntity>;
export type GamesControllerFindAllResult = AxiosResponse<GameEntity[]>;
export type GamesControllerFindOneResult = AxiosResponse<GameEntity>;
export type GamesControllerUpdateResult = AxiosResponse<GameEntity>;
export type GamesControllerRemoveResult = AxiosResponse<void>;
export type SongsControllerCreateResult = AxiosResponse<SongEntity>;
export type SongsControllerFindAllResult = AxiosResponse<SongEntity[]>;
export type SongsControllerFindOneResult = AxiosResponse<SongEntity>;
export type SongsControllerUpdateResult = AxiosResponse<SongEntity>;
export type SongsControllerRemoveResult = AxiosResponse<void>;
export type AuthControllerRegisterResult = AxiosResponse<UserEntity>;
export type AuthControllerLoginResult = AxiosResponse<LoggedInTokenEntity>;
export type AuthControllerLogoutResult = AxiosResponse<void>;
export type AuthControllerRefreshTokenResult = AxiosResponse<void>;
export type UsersControllerCreateResult = AxiosResponse<UserEntity>;
export type UsersControllerFindAllResult = AxiosResponse<UserEntity[]>;
export type UsersControllerFindOneResult = AxiosResponse<UserEntity>;
export type UsersControllerUpdateResult = AxiosResponse<UserEntity>;
export type UsersControllerRemoveResult = AxiosResponse<void>;
export type HealthControllerCheckResult =
  AxiosResponse<HealthControllerCheck200>;

export const getGamesControllerCreateMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
});

export const getGamesControllerFindAllMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.random.word(),
    title: faker.random.word(),
  }));

export const getGamesControllerFindOneMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
});

export const getGamesControllerUpdateMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
});

export const getSongsControllerCreateMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
  gameId: faker.random.word(),
});

export const getSongsControllerFindAllMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.random.word(),
    title: faker.random.word(),
    gameId: faker.random.word(),
  }));

export const getSongsControllerFindOneMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
  gameId: faker.random.word(),
});

export const getSongsControllerUpdateMock = () => ({
  id: faker.random.word(),
  title: faker.random.word(),
  gameId: faker.random.word(),
});

export const getAuthControllerRegisterMock = () => ({
  id: faker.random.word(),
  email: faker.random.word(),
});

export const getAuthControllerLoginMock = () => ({
  accessToken: faker.random.word(),
  refreshToken: faker.random.word(),
});

export const getUsersControllerCreateMock = () => ({
  id: faker.random.word(),
  email: faker.random.word(),
});

export const getUsersControllerFindAllMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.random.word(),
    email: faker.random.word(),
  }));

export const getUsersControllerFindOneMock = () => ({
  id: faker.random.word(),
  email: faker.random.word(),
});

export const getUsersControllerUpdateMock = () => ({
  id: faker.random.word(),
  email: faker.random.word(),
});

export const getHealthControllerCheckMock = () => ({
  status: faker.random.arrayElement([faker.random.word(), undefined]),
  info: faker.random.arrayElement([
    {
      clb5wuv740000i2hkcymlhdzq: {
        status: faker.random.arrayElement([faker.random.word(), undefined]),
      },
    },
    undefined,
  ]),
  error: faker.random.arrayElement([
    {
      clb5wuv740001i2hkbsapcrr9: {
        status: faker.random.arrayElement([faker.random.word(), undefined]),
      },
    },
    undefined,
  ]),
  details: faker.random.arrayElement([
    {
      clb5wuv740002i2hk2ftk0lic: {
        status: faker.random.arrayElement([faker.random.word(), undefined]),
      },
    },
    undefined,
  ]),
});

export const getOtogeBookmarkAPIMSW = () => [
  rest.post('*/games', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGamesControllerCreateMock()),
    );
  }),
  rest.get('*/games', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGamesControllerFindAllMock()),
    );
  }),
  rest.get('*/games/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGamesControllerFindOneMock()),
    );
  }),
  rest.patch('*/games/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getGamesControllerUpdateMock()),
    );
  }),
  rest.delete('*/games/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/songs', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getSongsControllerCreateMock()),
    );
  }),
  rest.get('*/songs', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getSongsControllerFindAllMock()),
    );
  }),
  rest.get('*/songs/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getSongsControllerFindOneMock()),
    );
  }),
  rest.patch('*/songs/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getSongsControllerUpdateMock()),
    );
  }),
  rest.delete('*/songs/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/auth/register', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAuthControllerRegisterMock()),
    );
  }),
  rest.post('*/auth/login', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getAuthControllerLoginMock()),
    );
  }),
  rest.get('*/auth/logout', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/auth/refresh', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.post('*/users', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersControllerCreateMock()),
    );
  }),
  rest.get('*/users', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersControllerFindAllMock()),
    );
  }),
  rest.get('*/users/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersControllerFindOneMock()),
    );
  }),
  rest.patch('*/users/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getUsersControllerUpdateMock()),
    );
  }),
  rest.delete('*/users/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/health', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getHealthControllerCheckMock()),
    );
  }),
];
