openapi: 3.0.0
paths:
  /games:
    post:
      operationId: GamesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameEntity'
      tags: &ref_0
        - games
    get:
      operationId: GamesController_findAll
      parameters:
        - name: skip
          required: false
          in: query
          schema:
            type: string
        - name: take
          required: false
          in: query
          schema:
            default: '30'
            type: string
        - name: cursor
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameWithSongsEntity'
      tags: *ref_0
  /games/{id}:
    get:
      operationId: GamesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameWithSongsEntity'
      tags: *ref_0
    patch:
      operationId: GamesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGameDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameEntity'
      tags: *ref_0
    delete:
      operationId: GamesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags: *ref_0
  /songs:
    post:
      operationId: SongsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSongDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongEntity'
      tags: &ref_1
        - songs
    get:
      operationId: SongsController_findAll
      parameters:
        - name: skip
          required: false
          in: query
          schema:
            type: string
        - name: take
          required: false
          in: query
          schema:
            default: '30'
            type: string
        - name: cursor
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - name: gameId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SongWithGameEntity'
      tags: *ref_1
  /songs/{id}:
    get:
      operationId: SongsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongWithGameEntity'
      tags: *ref_1
    patch:
      operationId: SongsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSongDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SongEntity'
      tags: *ref_1
    delete:
      operationId: SongsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags: *ref_1
  /auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      tags: &ref_2
        - auth
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedInTokenEntity'
      tags: *ref_2
  /auth/logout:
    get:
      operationId: AuthController_logout
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_2
  /auth/refresh:
    get:
      operationId: AuthController_refreshToken
      parameters: []
      responses:
        '200':
          description: ''
      tags: *ref_2
  /users:
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      tags: &ref_3
        - users
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntity'
      tags: *ref_3
  /users/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      tags: *ref_3
    patch:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      tags: *ref_3
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags: *ref_3
info:
  title: Otoge Bookmark API
  description: Otoge Bookmark API
  version: '0.1'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateGameDto:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    GameEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    SongEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    GameWithSongsEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        songs:
          type: array
          items:
            $ref: '#/components/schemas/SongEntity'
      required:
        - id
        - name
        - songs
    UpdateGameDto:
      type: object
      properties:
        name:
          type: string
    CreateSongDto:
      type: object
      properties:
        name:
          type: string
        gameId:
          type: string
      required:
        - name
        - gameId
    SongWithGameEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        game:
          $ref: '#/components/schemas/GameEntity'
      required:
        - id
        - name
        - game
    UpdateSongDto:
      type: object
      properties:
        name:
          type: string
        gameId:
          type: string
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserEntity:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
      required:
        - id
        - email
    LoginDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoggedInTokenEntity:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
    UpdateUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
